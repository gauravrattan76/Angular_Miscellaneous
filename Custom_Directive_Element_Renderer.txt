Custom_Directive_Detailed-
*****************************************************************************

Attribute selector

Directive constructor
The next thing we do is add a constructor to our directive, like so:

import { ElementRef } from '@angular/core';
.
.
.
class CardHoverDirective {
  constructor(private el: ElementRef) {
  }
}
When the directive gets created Angular can inject an instance of something called ElementRef into its constructor.

Note
How this works is called Dependency Injection, it’s a really important aspect of Angular and we discuss this in detail in a later section.
The ElementRef gives the directive direct access to the DOM element upon which it’s attached.

Let’s use it to change the background color of our card to gray.

ElementRef itself is a wrapper for the actual DOM element which we can access via the property nativeElement, like so:

el.nativeElement.style.backgroundColor = "gray";
This however assumes that our application will always be running in the environment of a browser.

Angular has been built from the ground up to work in a number of different environments, including server side via node and on a native mobile device. So the Angular team has provided a platform independent way of setting properties on our elements via something called a Renderer.

Listing 1. script.ts
import { Renderer } from '@angular/core';
.
.
.
class CardHoverDirective {
  constructor(private el: ElementRef,
              private renderer: Renderer) { 
    renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'gray'); 
  }
}
We use Dependency Injection (DI) to inject the renderer into our directives constructor.
Instead of setting the background color directly via the DOM element we do it by going through the renderer.
Important
In the future if we wanted to render our application on a platform other than a web browser then the Renderer calls the appropriate functions to change the background color on that platform. We are not limited to only being run in a web browser with a DOM.
Running the application now show this:

Directive Gray
Summary
We create a directive by decorating a class with the @Directive decorator.

The convention is to associate a directive to an element via an attribute selector, that is the name of the attribute wrapped in [].

We can inject a reference to the element the directive is associated with to the constructor of the directive. Then via a renderer we can interact with and change certain properties of that element.

The above is a very basic example of a custom directive, in the next lecture we’ll show you how you can detect when the user hovers over the card and a better way of interacting with the host element.

