.Ts FILE-
*****************************************************************

ts file code-
*******************************************

import { Component, OnInit } from '@angular/core';
import { map } from 'rxjs/operators';
import { Http, Response } from '@angular/http';
import { DataSource } from '@angular/cdk/collections';
import { Observable, of } from 'rxjs';
import { animate, state, style, transition, trigger } from '@angular/animations';



@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
      state('expanded', style({ height: '*', visibility: 'visible' })),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ],
})
 
export class AppComponent{
  // 'position',
  displayedColumns = [ 'name', 'weight'];
  dataSource = new ExampleDataSource();

  isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');
  expandedElement: any;
}

export interface Element {
  name: string;
  // position: number;
  weight: number;
  symbol: string;
}

const data: Element[] = [
  // { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },
  // { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },
  // { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },
  // { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },
  // { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },
  // { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },
  // { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },
  // { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },
  // { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },
  // { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },
  // { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },
  // { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },
  // { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },
  // { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },
  // { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },
  // { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },
  // { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },
  // { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },
  // { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },
  // { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },
  { name: 'Hydrogen', weight: 1.0079, symbol: 'H' },
  {  name: 'Helium', weight: 4.0026, symbol: 'He' },
  {name: 'Lithium', weight: 6.941, symbol: 'Li' },
  { name: 'Beryllium', weight: 9.0122, symbol: 'Be' },
  {  name: 'Boron', weight: 10.811, symbol: 'B' },
  {  name: 'Carbon', weight: 12.0107, symbol: 'C' },
  {  name: 'Nitrogen', weight: 14.0067, symbol: 'N' },
  { name: 'Oxygen', weight: 15.9994, symbol: 'O' },
  {  name: 'Fluorine', weight: 18.9984, symbol: 'F' },
  {  name: 'Neon', weight: 20.1797, symbol: 'Ne' },
  {  name: 'Sodium', weight: 22.9897, symbol: 'Na' },
  {  name: 'Magnesium', weight: 24.305, symbol: 'Mg' },
  {  name: 'Aluminum', weight: 26.9815, symbol: 'Al' },
  { name: 'Silicon', weight: 28.0855, symbol: 'Si' },
  { name: 'Phosphorus', weight: 30.9738, symbol: 'P' },
  {  name: 'Sulfur', weight: 32.065, symbol: 'S' },
  {  name: 'Chlorine', weight: 35.453, symbol: 'Cl' },
  {  name: 'Argon', weight: 39.948, symbol: 'Ar' },
  {  name: 'Potassium', weight: 39.0983, symbol: 'K' },
  { name: 'Calcium', weight: 40.078, symbol: 'Ca' },
];

/**
 * Data source to provide what data should be rendered in the table. The observable provided
 * in connect should emit exactly the data that should be rendered by the table. If the data is
 * altered, the observable should emit that new set of data on the stream. In our case here,
 * we return a stream that contains only one set of data that doesn't change.
 */
export class ExampleDataSource extends DataSource<any> {
  /** Connect function called by the table to retrieve one stream containing the data to render. */
  connect(): Observable<Element[]> {
    const rows = [];
    data.forEach(element => rows.push(element, { detailRow: true, element }));
    console.log(rows);
    return of(rows);
  }

  disconnect() { }


//   testinfodata:any;
//   garv:any;
//   apiurl:any;
//   hidedata:any;


//   constructor( private http: Http) { }
  
//   ngOnInit(){

//   this.http.get("http://3.204.110.149:5005/allRunInfoData")
//   .pipe(map((response: Response) => response.json()))
//   .subscribe(data => {
//       this.testinfodata = data;
//       this.testinfodata =  this.testinfodata.data;
//       console.log(this.testinfodata);
  
//   });
// }

// expandtestdata(data){
// console.log(data);
// this.garv = true;
// this.apiurl ="http://3.204.110.149:5005/runInfo/testInfo/runId/"+ data.RunID;
// this.http.get(this.apiurl)
// .pipe(map((response: Response) => response.json()))
// .subscribe(data => {
//     this.hidedata = data;
//     this.hidedata =  this.testinfodata.data;
// });
// }

 
  }



***************************************************

HTML FILE-

<!-- <table class="table" style="border: 1 px solid black;border-collapse: collapse">
  <thead>
      <tr class="tableheader">
        <td colspan="30">
          <tr>
              <td></td>
              <td>RunID</td>
              <td>TestSetName</td>
              <td>Context</td>
              <td>Location</td>
              <td>Type</td>
              <td>Result</td>
              <td>Status</td>
              <td>SoftwareVersion</td>
              <td>Date</td>
              <td>Duration</td>
          </tr>
        </td>
         
      </tr>
  </thead>
  <tbody>
      <tr *ngFor="let queryParem of testinfodata" >
        <td colspan="20">
          <tr>
              <td><span class="glyphicon glyphicon-plus" (click)="expandtestdata(queryParem)"></span></td>
              <td>{{queryParem.RunID}}</td>
              <td>{{queryParem.TestSetName}}</td>
              <td>{{queryParem.Context}}</td>
              <td>{{queryParem.Location}}</td>
              <td>{{queryParem.Type}}</td>
              <td>{{queryParem.Result}}</td>
              <td>{{queryParem.Status}}</td>
              <td>{{queryParem.Softwareversion}}</td>
              <td>{{queryParem.Date}}</td>
              <td>{{queryParem.Duration}}</td>
          </tr>
          <tr><td colspan="10">
              <div *ngIf="garv">
                  <div>Hi Gaurav!!</div>
              </div>
          </td></tr>
        </td>
    
      </tr>
  </tbody>
</table> -->
<mat-toolbar color="primary">
    <span>Angular Material</span>
  </mat-toolbar>

  <!-- Table Data -->
  <div class="example-container mat-elevation-z8">
      <mat-table #table [dataSource]="dataSource">
    
        <!--- Note that these columns can be defined in any order.
              The actual rendered columns are set as a property on the row definition" -->
    
        <!-- Position Column -->
        <!-- <ng-container matColumnDef="position">
          <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>
          <mat-cell *matCellDef="let element"> {{element.position}} </mat-cell>
        </ng-container> -->
    
        <!-- Name Column -->
        <ng-container matColumnDef="name">
          <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>
          <mat-cell *matCellDef="let element"> {{element.name}} </mat-cell>
        </ng-container>
    
        <!-- Weight Column -->
        <ng-container matColumnDef="weight">
          <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>
          <mat-cell *matCellDef="let element"> {{element.weight}} </mat-cell>
        </ng-container>
    
        <!-- Expanded Content Column - The detail row is made up of this one column -->
        <ng-container matColumnDef="expandedDetail">
          <mat-cell *matCellDef="let detail"> 
          <table border="1px solid black;border-collapse:collapse">
            <tr>
              <td>Name</td>
              <td>Symbol</td>
            </tr>
            <tr>
              <td>{{detail.element.name}}</td>
              <td>{{detail.element.symbol}}</td>
            </tr>
          </table>
          </mat-cell>
        </ng-container>
    
        <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
        <mat-row *matRowDef="let row; columns: displayedColumns;"
                matRipple 
                class="element-row" 
                [class.expanded]="expandedElement == row"
                (click)="expandedElement = row"></mat-row>
        <mat-row *matRowDef="let row; columns: ['expandedDetail']; when: isExpansionDetailRow"
                [@detailExpand]="row.element == expandedElement ? 'expanded' : 'collapsed'"
                style="overflow: hidden"> 
        </mat-row>
      </mat-table>
    </div>
    
    
    <!-- Copyright 2017 Google Inc. All Rights Reserved.
        Use of this source code is governed by an MIT-style license that
        can be found in the LICENSE file at http://angular.io/license -->